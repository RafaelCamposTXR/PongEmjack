
/**
 * Instância individual do jogo, com base em código disponibilizado pela Nand2Tetris (screen.vm e keyboard.vm)
 */
class Pong{
    // Declaração de campos (atributos)
    static Pong instance;   // Instância única da classe Pong
    field Slider slider0;   // Objeto do tipo Slider para o jogador controlar
    field Bola bola0;       // Objeto do tipo Bola para a movimentação da bola
    field int parede;       // Variável para armazenar a parede atingida pela bola
    field boolean Terminou; // Indica se o jogo terminou
    field int pontuacao;    // Armazena a pontuação do jogador
    field int UltimaParede; // Armazena a última parede atingida pela bola
    field int larguraSlider; // Armazena a largura inicial do slider

    constructor Pong new() {
	    // Inicialização do jogo
	    do Screen.clearScreen(); // Limpa a tela
	    let larguraSlider = 50; // Largura inicial do slider
      	    let slider0 = Slider.new(230, 229, larguraSlider, 7); // Cria um objeto Slider
       	    let bola0 = Bola.new(253, 222, 0, 511, 0, 229); // Cria um objeto Bola
	    do bola0.Destino(400,0); // Configura a posição inicial da bola

      // Desenho da estrutura do piso e da área de pontuação na tela
	    do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Score: 0");

      // Inicialização das variáveis
	    let Terminou = false;
	    let pontuacao = 0;
	    let parede = 0;
	    let UltimaParede = 0;
      return this;
    }

    // Método para limpar a memória desalocando objetos slider0 e bola0
    method void LimpaMemoria() {
      do slider0.LimpaMemoria();
      do bola0.LimpaMemoria();
      do Memory.deAlloc(this);
      return;
    }

    // Função para criar uma nova instância da classe Pong
    function void newInstance() {
      let instancia = Pong.new();
      return;
    }

    // Função para obter a instância atual da classe Pong
    function Pong getInstance() {
      return instancia;
    }

    // Método principal do jogo
    method void PongLoop() {
      var char key;         // Variável para armazenar a tecla pressionada
      while (~Terminou) {   // Loop principal do jogo
        while ((key = 0) & (~Terminou)) {  // Loop para lidar com a entrada do teclado
          let key = Keyboard.keyPressed(); // Obtém a tecla pressionada
          do slider0.move();      // Move o slider
          do Sys.wait(50);        // Aguarda um curto período
	  do Move();  // Move a bola
          }

	  // Verifica a tecla pressionada e atualiza a direção do slider
          if (key = 130) {
	          do slider0.setDirecao(1);
          }
 	  else {
	      if (key = 132) {
 	        do slider0.setDirecao(2);
              } else {
	            if (key = 140) {
                	let Terminou = true;  // Se a tecla for 140, encerra o jogo
		    }
		}
          }

	  // Loop para continuar movendo o slider após a tecla ser solta
          while ((~(key = 0)) & (~Terminou)) {
              let key = Keyboard.keyPressed();
              do slider0.move();
              do Sys.wait(50);
              do Move();
              
          }
      }
	// Se o jogo terminou, exibe "Game Over" na tela
	    if (Terminou) {
        	do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    }      
      return;
    }

    // Método para movimentar a bola e verificar colisões
    method void Move() {
	    var int DirecaoRetorno, RaqueteEsquerda, RaqueteDireita, BolaEsquerda, BolaDireita;
	    let parede = bola0.MoveBola();    // Move a bola e obtém a parede atingida
      	    if ((parede > 0) & (~(parede = UltimaParede))) {  // Verifica se a bola atingiu uma nova parede
	      let UltimaParede = parede;     	// Atualiza a última parede atingida
	      let DirecaoRetorno = 0;		// Inicializa a direção de retorno
	      let RaqueteEsquerda = slider0.LadoEsquerdo(); // Obtém a posição do lado esquerdo do slider
	      let RaqueteDireita = slider0.LadoDireito();   // Obtém a posição do lado direito do slider
	      let BolaEsquerda = bola0.LadoEsquerdo();      // Obtém a posição do lado esquerdo da bola
	      let BolaDireita = bola0.LadoDireito();	    // Obtém a posição do lado direito da bola

	      // Verifica se a bola atingiu a parede superior
	      if (parede = 4) {
		      let Terminou = (RaqueteEsquerda > BolaDireita) | (RaqueteDireita < BolaEsquerda);
	        if (~Terminou) {

			// Verifica se a bola atingiu a parte esquerda ou direita do slider
		        if (BolaDireita < (RaqueteEsquerda + 10)) {
			        let DirecaoRetorno = -1; // Define a direção de retorno para a esquerda
		        }
		        else {
			        if (BolaEsquerda > (RaqueteDireita - 10)) {
			          let DirecaoRetorno = 1; // Define a direção de retorno para a direita
			        }
		        }

			// Reduz a largura do slider e incrementa a pontuação
		        let larguraSlider = larguraSlider - 2;
		        do slider0.setLargura(larguraSlider);			
  		        let pontuacao = pontuacao + 1;
		        do Output.moveCursor(22,7);
		        do Output.printInt(pontuacao);
		      }
	      } 
	    // Move a bola na direção do retorno
  	    do bola0.RetornoBola(DirecaoRetorno);
	    }
	    return;
    }
}
