
/**
 * Instância individual do jogo, com base em código disponibilizado pela Nand2Tetris (screen.vm e keyboard.vm)
 */
class Pong{

    // The singlton 
    static Pong instance;

    // The slider0
    field Slider slider0;

    // The ball
    field Bola bola0;
    field int parede;

    // True when the game is over
    field boolean exit;

    // The current score.
    field int score;

    // The last wall that the ball bounced from.
    field int lastWall;

    // The current width of the slider0
    field int batWidth;

    /** Constructs a new Pong Game. */
    constructor PongGame new() {
	do Screen.clearScreen();

	let batWidth = 50;
        let slider0 = Slider.new(230, 229, batWidth, 7);

        let bola0 = Bola.new(253, 222, 0, 511, 0, 229);
	do bola0.setDestination(400,0);

	do Screen.drawRectangle(0, 238, 511, 240);
	do Output.moveCursor(22,0);
	do Output.printString("Score: 0");
	
	let exit = false;
	let score = 0;
	let wall = 0;
	let lastWall = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do slider0.dispose();
		do bola0.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of PongGame and stores it. */
    function void newInstance() {
        let instance = PongGame.new();
        return;
    }
    
    /** Returns the single instance of PongGame. */
    function PongGame getInstance() {
        return instance;
    }

    /** Starts the game. Handles inputs from the user that control
     *  the slider0's movement direction. */
    method void run() {
        var char key;

        while (~exit) {
            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do slider0.move();
		do moveBall();
            }

            if (key = 130) {
	        do slider0.setDirection(1);
            }
	    else {
	        if (key = 132) {
 	            do slider0.setDirection(2);
                }
		else {
	            if (key = 140) {
                        let exit = true;
		    }
		}
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do slider0.move();
                do moveBall();
            }
        }

	if (exit) {
    	    do Output.moveCursor(10,27);
	    do Output.printString("Game Over");
	}
            
        return;
    }

    /**
     * Handles bola0 movement, including bouncing.
     * If the bola0 bounces from the wall, finds its new direction.
     * If the bola0 bounces from the slider0, shrinks the slider0's size and
     * increases the score by one.
     */
    method void moveBall() {
	var int bouncingDirection, batLeft, batRight, ballLeft, ballRight;

	let wall = bola0.move();

	if ((wall > 0) & (~(wall = lastWall))) {
	    let lastWall = wall;
	    let bouncingDirection = 0;
	    let batLeft = slider0.getLeft();
	    let batRight = slider0.getRight();
	    let ballLeft = bola0.getLeft();
	    let ballRight = bola0.getRight();
	
	    if (wall = 4) {
		let exit = (batLeft > ballRight) | (batRight < ballLeft);
	        if (~exit) {
		    if (ballRight < (batLeft + 10)) {
			let bouncingDirection = -1;
		    }
		    else {
			if (ballLeft > (batRight - 10)) {
			    let bouncingDirection = 1;
			}
		    }

		    let batWidth = batWidth - 2;
		    do slider0.setWidth(batWidth);			
  		    let score = score + 1;
		    do Output.moveCursor(22,7);
		    do Output.printInt(score);
		}
	    }

  	    do bola0.bounce(bouncingDirection);
	}

	return;
    }
}
