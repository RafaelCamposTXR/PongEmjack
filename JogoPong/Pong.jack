
/**
 * Instância individual do jogo, com base em código disponibilizado pela Nand2Tetris (screen.vm e keyboard.vm)
 */
class Pong{
    static Pong instance;
    field Slider slider0;
    field Bola bola0;
    field int parede;
    field boolean Terminou;
    field int pontuacao;
    field int UltimaParede;
    field int larguraSlider;

    constructor Pong new() {
	  do Screen.clearScreen();

	  let larguraSlider = 50;
    let slider0 = Slider.new(230, 229, larguraSlider, 7);
    let bola0 = Bola.new(253, 222, 0, 511, 0, 229);
	  do bola0.Destino(400,0);

	  do Screen.drawRectangle(0, 238, 511, 240);
	  do Output.moveCursor(22,0);
	  do Output.printString("Score: 0");
	
	  let Terminou = false;
	  let pontuacao = 0;
	  let parede = 0;
	  let UltimaParede = 0;
    return this;
    }

    /** Deallocates the object's memory. */
    method void LimpaMemoria() {
      do slider0.LimpaMemoria();
		  do bola0.LimpaMemoria();
      do Memory.deAlloc(this);
      return;
    }

    /** Creates an instance of Pong and stores it. */
    function void newInstance() {
        let instance = Pong.new();
        return;
    }
    
    /** Returns the single instance of Pong. */
    function Pong getInstance() {
        return instance;
    }

    /** Starts the game. Handles inputs from the user that control
     *  the slider0's movement direction. */
    method void PongLoop() {
        var char key;

        while (~Terminou) {
            // waits for a key to be pressed.
            while ((key = 0) & (~Terminou)) {
                let key = Keyboard.keyPressed();
                do slider0.move();
                do Sys.wait(50);
		            do Move();
            }

            if (key = 130) {
	        do slider0.setDirecao(1);
            }
	    else {
	        if (key = 132) {
 	            do slider0.setDirecao(2);
                }
		else {
	            if (key = 140) {
                        let Terminou = true;
		    }
		}
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~Terminou)) {
                let key = Keyboard.keyPressed();
                do slider0.move();
                do Move();
                do Sys.wait(50);
            }
        }

	if (Terminou) {
    do Output.moveCursor(10,27);
	  do Output.printString("Game Over");
	}
            
        return;
    }

    /**
     * Handles bola0 movement, including bouncing.
     * If the bola0 bounces from the parede, finds its new direction.
     * If the bola0 bounces from the slider0, shrinks the slider0's size and
     * increases the pontuacao by one.
     */
    method void Move() {
	var int DirecaoRetorno, RaqueteEsquerda, RaqueteDireita, BolaEsquerda, BolaDireita;

	let parede = bola0.MoveBola();

	if ((parede > 0) & (~(parede = UltimaParede))) {
	    let UltimaParede = parede;
	    let DirecaoRetorno = 0;
	    let RaqueteEsquerda = slider0.LadoEsquerdo();
	    let RaqueteDireita = slider0.LadoDireito();
	    let BolaEsquerda = bola0.LadoEsquerdo();
	    let BolaDireita = bola0.LadoDireito();
	
	    if (parede = 4) {
		let Terminou = (RaqueteEsquerda > BolaDireita) | (RaqueteDireita < BolaEsquerda);
	        if (~Terminou) {
		    if (BolaDireita < (RaqueteEsquerda + 10)) {
			let DirecaoRetorno = -1;
		    }
		    else {
			if (BolaEsquerda > (RaqueteDireita - 10)) {
			    let DirecaoRetorno = 1;
			}
		    }

		    let larguraSlider = larguraSlider - 2;
		    do slider0.setLargura(larguraSlider);			
  		  let pontuacao = pontuacao + 1;
		    do Output.moveCursor(22,7);
		    do Output.printInt(pontuacao);
		}
	    }

  	    do bola0.RetornoBola(DirecaoRetorno);
	}

	return;
    }
}
