# VIRTUAL MACHINE

# Elementos de Sistemas Computacionais 2022-2
# Bruna Isabela de Oliveira
# 12011ECP004
# -----------------------------------------------

# Analisa cada comando VM em seus elementos lexicais
class Parser:
    def __init__(self, filename):
        if not filename.endswith(".vm"):
            filename += ".vm"
        with open(filename, "r") as f:
            self.input = list(l.strip() for l in f.readlines() if not l.startswith("//"))
        self.seek = 0
        self.current_command = None

    def hasMoreCommands(self):
        return self.seek < len(self.input)

    def advance(self):
        self.current_command = self.input[self.seek]
        self.seek += 1

    def command_type(self):
        head = self.current_command.split(" ")[0]
        if head in [
            "add",
            "sub",
            "neg",
            "eq",
            "gt",
            "lt",
            "and",
            "or",
            "not",
        ]:
            return "C_ARITHMETIC"
        elif head in ["push", "pop"]:
            return f"C_{head.upper()}"
        else:
            return f"C_{head.upper()}?"

    def arg1(self):
        ct = self.command_type()
        if ct != "C_RETURN":
            if ct == "C_ARITHMETIC":
                return self.current_command.split(" ")[0]
            return self.current_command.split(" ")[1]

    def arg2(self):
        ct = self.command_type()
        if ct in ["C_PUSH", "C_POP", "C_FUNCTION", "C_CALL"]:
            return int(self.current_command.split(" ")[2])


# Escreve o cÃ³digo Assembly (.asm) que implementa o comando parsed
class CodeWriter:
    def __init__(self, output_file):
        self.output_file = open(output_file, "w")
        self.label_counter = 0
        self.vm_filename = None

    def setFileName(self, filename):
        self.vm_filename = filename

    def writeArithmetic(self, command):
        if command == "add":
            self.writeBinaryOperation("+")
        elif command == "sub":
            self.writeBinaryOperation("-")
        elif command == "neg":
            self.writeUnaryOperation("-")
        elif command == "eq":
            self.writeComparison("JEQ")
        elif command == "gt":
            self.writeComparison("JGT")
        elif command == "lt":
            self.writeComparison("JLT")
        elif command == "and":
            self.writeBinaryOperation("&")
        elif command == "or":
            self.writeBinaryOperation("|")
        elif command == "not":
            self.writeUnaryOperation("!")

    def writePushPop(self, command, segment, index):
        if command == "push":
            if segment == "constant":
                self.writePushConstant(index)
            elif segment in ["local", "argument", "this", "that"]:
                self.writePushSegment(segment, index)
            elif segment == "temp":
                self.writePushTemp(index)
            elif segment == "pointer":
                self.writePushPointer(index)
            elif segment == "static":
                self.writePushStatic(index)
        elif command == "pop":
            if segment in ["local", "argument", "this", "that"]:
                self.writePopSegment(segment, index)
            elif segment == "temp":
                self.writePopTemp(index)
            elif segment == "pointer":
                self.writePopPointer(index)
            elif segment == "static":
                self.writePopStatic(index)

    def writePushConstant(self, index):
        self.writeACommand(index)
        self.writeDtoStack()
        self.increaseStackPointer()

    def writePushSegment(self, segment, index):
        self.writeSegmentAddress(segment, index)
        self.writeACommand("M")
        self.writeDtoStack()
        self.increaseStackPointer()

    def writePushTemp(self, index):
        self.writeTempAddress(index)
        self.writeACommand("M")
        self.writeDtoStack()
        self.increaseStackPointer()

    def writePushPointer(self, index):
        self.writePointerAddress(index)
        self.writeACommand("M")
        self.writeDtoStack()
        self.increaseStackPointer()

    def writePushStatic(self, index):
        self.writeStaticAddress(index)
        self.writeACommand("M")
        self.writeDtoStack()
        self.increaseStackPointer()

    def writePopSegment(self, segment, index):
        self.writeSegmentAddress(segment, index)
        self.writeDCommand("A")
        self.writeDCommand("D+A")
        self.writeR13ToM() 
        self.decreaseStackPointer()
        self.writePopToD()
        self.writeR13ToA()
        self.writeDtoM()

    def writePopTemp(self, index):
        self.writeTempAddress(index)
        self.writeDCommand("A")
        self.writeDCommand("D+A")
        self.writeR13ToM()
        self.decreaseStackPointer()
        self.writePopToD()
        self.writeR13ToA()
        self.writeDtoM()

    def writePopPointer(self, index):
        self.writePointerAddress(index)
        self.writeR13ToM() 
        self.decreaseStackPointer()
        self.writePopToD()
        self.writeR13ToA()
        self.writeDtoM()

    def writePopStatic(self, index):
        self.writeStaticAddress(index)
        self.writeR13ToM() 
        self.decreaseStackPointer()
        self.writePopToD()
        self.writeR13ToA()
        self.writeDtoM()

    def writeBinaryOperation(self, operation):
        self.decreaseStackPointer()
        self.writePopToD()
        self.decreaseStackPointer()
        self.writeDOperation(operation)
        self.increaseStackPointer()
        self.writeDtoStack()

    def writeUnaryOperation(self, operation):
        self.decreaseStackPointer()
        self.writePopToD()
        self.writeDUnaryOperation(operation)
        self.increaseStackPointer()
        self.writeDtoStack()

    def writeComparison(self, jump):
        self.decreaseStackPointer()
        self.writePopToD()
        self.decreaseStackPointer()
        self.writePopToM()
        self.writeCompareDAndM(jump)
        self.increaseStackPointer()
        self.writeDtoStack()

    def writeACommand(self, address):
        self.output_file.write("@" + str(address) + "\n")

    def writeDCommand(self, dest):
        self.output_file.write(dest + "=D\n")

    def writeDtoM(self):
        self.output_file.write("M=D\n")

    def writeR13ToM(self):
        self.output_file.write("@R13\n")
        self.output_file.write("M=D\n")

    def writeR13ToA(self):
        self.output_file.write("@R13\n")
        self.output_file.write("A=M\n")

    def decreaseStackPointer(self):
        self.output_file.write("@SP\n")
        self.output_file.write("M=M-1\n")

    def increaseStackPointer(self):
        self.output_file.write("@SP\n")
        self.output_file.write("M=M+1\n")

    def writePopToD(self):
        self.output_file.write("@SP\n")
        self.output_file.write("A=M\n")
        self.output_file.write("D=M\n")

    def writePopToM(self):
        self.output_file.write("@SP\n")
        self.output_file.write("A=M\n")
        self.output_file.write("M=M-1\n")
        self.output_file.write("A=A+1\n")
        self.output_file.write("A=M\n")

    def writeDtoStack(self):
        self.output_file.write("@SP\n")
        self.output_file.write("A=M\n")
        self.output_file.write("M=D\n")

    def writeDOperation(self, operation):
        self.output_file.write("D=D" + operation + "M\n")

    def writeDUnaryOperation(self, operation):
        self.output_file.write("D=" + operation + "D\n")

    def writeCompareDAndM(self, jump):
        label = self.getUniqueLabel()
        self.output_file.write("@TRUE_" + label + "\n")
        self.output_file.write("D;" + jump + "\n")
        self.output_file.write("D=0\n")
        self.output_file.write("@END_" + label + "\n")
        self.output_file.write("0;JMP\n")
        self.output_file.write("(TRUE_" + label + ")\n")
        self.output_file.write("D=-1\n")
        self.output_file.write("(END_" + label + ")\n")

    def writeSegmentAddress(self, segment, index):
        self.output_file.write("@" + segment + "\n")
        if segment == "local":
            self.output_file.write("D=M\n")
        elif segment == "argument":
            self.output_file.write("D=M\n")
        elif segment == "this":
            self.output_file.write("D=M\n")
        elif segment == "that":
            self.output_file.write("D=M\n")
        self.output_file.write("@" + str(index) + "\n")
        self.output_file.write("D=D+A\n")

    def writeTempAddress(self, index):
        self.output_file.write("@R5\n")
        self.output_file.write("D=A\n")
        self.output_file.write("@" + str(index) + "\n")
        self.output_file.write("D=D+A\n")

    def writePointerAddress(self, index):
        if index == 0:
            self.output_file.write("@THIS\n")
        elif index == 1:
            self.output_file.write("@THAT\n")

    def writeStaticAddress(self, index):
        self.output_file.write("@" + self.vm_filename + "." + str(index) + "\n")

    def writePushLabel(self, label):
        self.output_file.write("@" + label + "\n")
        self.output_file.write("D=A\n")
        self.output_file.write("@SP\n")
        self.output_file.write("A=M\n")
        self.output_file.write("M=D\n")
        self.output_file.write("@SP\n")
        self.output_file.write("M=M+1\n")

    def writeSetARG(self, num_args):
        self.output_file.write("@SP\n")
        self.output_file.write("D=M\n")
        self.output_file.write("@" + str(num_args) + "\n")
        self.output_file.write("D=D-A\n")
        self.output_file.write("@5\n")
        self.output_file.write("D=D-A\n")
        self.output_file.write("@ARG\n")
        self.output_file.write("M=D\n")

    def writeSetLCL(self):
        self.output_file.write("@SP\n")
        self.output_file.write("D=M\n")
        self.output_file.write("@LCL\n")
        self.output_file.write("M=D\n")

    def writeGotoLabel(self, label):
        self.output_file.write("@" + label + "\n")
        self.output_file.write("0;JMP\n")

    def writeIfGotoLabel(self, label):
        self.decreaseStackPointer()
        self.writePopToD()
        self.output_file.write("@" + label + "\n")
        self.output_file.write("D;JNE\n")

    def writeFunction(self, function_name, num_locals):
        self.output_file.write("(" + function_name + ")\n")
        for _ in range(num_locals):
            self.writePushConstant(0)

    def writeCall(self, function_name, num_args):
        return_label = self.getUniqueLabel()

        self.writePushLabel("RETURN_" + return_label)

        self.writePushD("LCL")
        self.writePushD("ARG")
        self.writePushD("THIS")
        self.writePushD("THAT")

        self.writeSetARG(num_args)

        self.writeSetLCL()

        self.writeGotoLabel(function_name)

        self.output_file.write("(RETURN_" + return_label + ")\n")

    def writeReturn(self):
        self.writeFrameToR13()  
        self.writeReturnAddressToR14() 
        self.writeReturnValueToARG() 
        self.writeSPToARG() 
        self.writeRestoreThat() 
        self.writeRestoreThis()  
        self.writeRestoreArgument()
        self.writeRestoreLocal() 
        self.writeReturnAddressToA()
        self.writeGotoA()

    def writeFrameToR13(self):
        self.output_file.write("@LCL\n")
        self.output_file.write("D=M\n")
        self.output_file.write("@R13\n")
        self.output_file.write("M=D\n")

    def writeReturnAddressToR14(self):
        self.output_file.write("@5\n")
        self.output_file.write("A=D-A\n")
        self.output_file.write("D=M\n")
        self.output_file.write("@R14\n")
        self.output_file.write("M=D\n")

    def writeReturnValueToARG(self):
        self.decreaseStackPointer()
        self.writePopToD()
        self.output_file.write("@ARG\n")
        self.output_file.write("A=M\n")
        self.output_file.write("M=D\n")

    def writeSPToARG(self):
        self.output_file.write("@ARG\n")
        self.output_file.write("D=M+1\n")
        self.output_file.write("@SP\n")
        self.output_file.write("M=D\n")

    def writeRestoreThat(self):
        self.output_file.write("@R13\n")
        self.output_file.write("AM=M-1\n")
        self.output_file.write("D=M\n")
        self.output_file.write("@THAT\n")
        self.output_file.write("M=D\n")

    def writeRestoreThis(self):
        self.output_file.write("@R13\n")
        self.output_file.write("AM=M-1\n")
        self.output_file.write("D=M\n")
        self.output_file.write("@THIS\n")
        self.output_file.write("M=D\n")

    def writeRestoreArgument(self):
        self.output_file.write("@R13\n")
        self.output_file.write("AM=M-1\n")
        self.output_file.write("D=M\n")
        self.output_file.write("@ARG\n")
        self.output_file.write("M=D\n")

    def writeRestoreLocal(self):
        self.output_file.write("@R13\n")
        self.output_file.write("AM=M-1\n")
        self.output_file.write("D=M\n")
        self.output_file.write("@LCL\n")
        self.output_file.write("M=D\n")

    def writeReturnAddressToA(self):
        self.output_file.write("@R14\n")
        self.output_file.write("A=M\n")

    def writeGotoA(self):
        self.output_file.write("0;JMP\n")


## Conduz o processo
class Main:
    def __init__(self, filename):
        self.parser = Parser(filename)
        self.code_writer = CodeWriter(filename[:-3] + ".asm") 
        self.code_writer.setFileName(filename[:-3])

    def translate(self):
        while self.parser.hasMoreCommands():
            self.parser.advance()
            command_type = self.parser.command_type()

            if command_type == "C_ARITHMETIC":
                self.code_writer.writeArithmetic(self.parser.arg1())
            elif command_type in ["C_PUSH", "C_POP"]:
                segment = self.parser.arg1()
                index = self.parser.arg2()
                self.code_writer.writePushPop(command_type[2:].lower(), segment, index)

    def close(self):
        self.code_writer.output_file.close()



if __name__ == '__main__':
    filename = input("Entre com seu arquivo VM: ")
    vm_translator = Main(filename)
    vm_translator.translate()
    vm_translator.close()
