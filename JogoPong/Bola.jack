
class Bola{

  field int x, y;         	 // Posição da bola
  field int retax, retay; 	 // Distância até o destino (coordenadas x e y)
  field int d, retaD, diagonalD; // Variáveis para cálculos de movimento
  field boolean inverte, xpositivo, ypositivo; 			     // Flags para controle de movimento
  field int ParedeEsquerda, ParedeDireita, ParedeCima, ParedeBaixo;  // Limites da tela
  field int parede; // Indica qual parede foi atingida

  constructor Bola new(int x0, int y0, int ParedeEsquerda0, int ParedeDireita0, int ParedeCima0, int ParedeBaixo0) {    	
	  let x = x0;		
	  let y = y0;
	  let ParedeEsquerda = ParedeEsquerda0;
	  let ParedeDireita = ParedeDireita0 - 6; // -6 para o tamanho da bola
	  let ParedeCima = ParedeCima0; 
	  let ParedeBaixo = ParedeBaixo0 - 6; // -6 para o tamanho da bola
	  let parede = 0;
    	  do Exibir();
     	  return this;
  }
  //Fim do construtor de classe


  //Funções de Desenho da bola na tela
  method void LimpaMemoria(){
    do Memory.deAlloc(this);
    return;
  }
  method void Exibir(){
    do Screen.setColor(true);
    do ConstruirBola();
    return;
  }
  method void Esconder(){
    do Screen.setColor(false);
    do ConstruirBola();
    return;
  }
  method void ConstruirBola(){
    do Screen.drawRectangle(x, y, x+5, y+5); // Desenha a bola na tela
    return;
  }
  method int LadoEsquerdo(){
    return x; // Retorna a posição do lado esquerdo da bola
  }
  method int LadoDireito(){
    return x+5; // Retorna a posição do lado direito da bola
  }
  //Fim das funções envolvendo tela

  //Determina a posição final da bola com base na posição atual
  method void Destino(int destx, int desty){
    var int dx, dy, temp;
    let retax = destx - x;
    let retay = desty - y;
    let dx = Math.abs(retax);
    let dy = Math.abs(retay);
    let inverte = (dx < dy);
    if(inverte){
      let temp = dx;
      let dx = dy;
      let dy = temp;
      let xpositivo = (y < desty);
      let ypositivo = (x < destx);
    }
    else {
      let xpositivo = (x < destx);
      let ypositivo = (y < desty);
    }
    let d = (2 * dy) - dx;
    let retaD = 2 * dy;
    let diagonalD = 2 * (dy - dx);

    return;
  }

  method int MoveBola(){
    do Esconder();  // Esconde a bola antes de movê-la
    if(d < 0){
      let d = d + retaD;
    }
    else{
      let d = d + diagonalD;
      if (ypositivo){
        if (inverte){let x = x + 4;}
        else { let y = y - 4;}
      }
      else{
        if (inverte){let x = x - 4;}
        else{let y = y - 4;}
      }
    }
    if(xpositivo){
      if (inverte){let y = y + 4;}
      else{let x = x + 4;}
    }
    else{
      if (inverte){let y = y - 4;}
      else{let x = x - 4;}
    }

    // Verifica se a bola atingiu alguma parede
    if (~(x > ParedeEsquerda)){
      let parede = 1;          // Indica que a bola atingiu a parede esquerda
      let x = ParedeEsquerda;  // Reposiciona a bola para a parede esquerda
    }
    if (~(x < ParedeDireita)){
      let parede = 2;         // Indica que a bola atingiu a parede direita
      let x = ParedeDireita;  // Reposiciona a bola para a parede direita
    }
    if (~(y > ParedeCima)){ 
      let parede = 3;     // Indica que a bola atingiu a parede superior
      let y = ParedeCima; // Reposiciona a bola para a parede superior
    }
    if (~(y < ParedeBaixo)){
      let parede = 4;      // Indica que a bola atingiu a parede inferior
      let y = ParedeBaixo; / Reposiciona a bola para a parede inferior
    }
    do Exibir();   // Exibe a bola após o movimento
    return parede; // Retorna qual parede foi atingida
  }

  // Método para retornar a bola após atingir uma parede
  method void RetornoBola(int DireçãoRetorno){
    var int Novox, Novoy, divRetax, divRetay, fator;

    let divRetax = retax / 10;
    let divRetay = retay / 10;

    if (DireçãoRetorno = 0){
      let fator = 10;  // Fator de retorno padrão
    }
    else{
      if ((~(retax < 0) & (DireçãoRetorno = 1)) | (retax < 0) & (DireçãoRetorno = (-1))) {
        let fator = 20;  // Fator de retorno dobrado se movendo para a esquerda
      }
      else{
        let fator = 5;   // Fator de retorno reduzido se movendo para a direita
      }
    }

    // Calcula a nova posição da bola com base na parede atingida
    if (parede = 1){
      let Novox = 506;
      let Novoy = (divRetay * (-50)) / divRetax;
      let Novoy = y + (Novoy * fator);
    }
    else{
      if (parede = 2){
        let Novox = 0;
        let Novoy= (divRetay * 50) / divRetax;
        let Novoy= y + (Novoy * fator);
      }
      else{
        if (parede = 3){
          let Novoy = 250;
          let Novox = (divRetax * (-25)) / divRetay;
          let Novox = x + (Novox * fator);
        }
        else{
          let Novoy = 0;
          let Novox = (divRetax * 25) / divRetay;
          let Novox = x + (Novox * fator);
        }
      }
    }
    do Destino(Novox, Novoy); // Define o novo destino da bola
    return;
  }
}

